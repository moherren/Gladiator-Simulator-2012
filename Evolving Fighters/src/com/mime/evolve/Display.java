package com.mime.evolve;import java.awt.Canvas;import java.awt.Color;import java.awt.Component;import java.awt.FlowLayout;import java.awt.Font;import java.awt.FontFormatException;import java.awt.Graphics;import java.awt.Graphics2D;import java.awt.font.FontRenderContext;import java.awt.font.GlyphVector;import java.awt.image.BufferStrategy;import java.awt.image.BufferedImage;import java.awt.image.DataBufferInt;import java.io.File;import java.io.IOException;import java.text.DecimalFormat;import java.util.Random;import javax.swing.JFrame;import javax.swing.JPanel;import com.mime.evolve.graphics.Screen;import com.mime.evolve.input.InputHandler;import com.mime.evolve.input.User;import com.mime.evolve.sound.SoundHandler;import com.mime.evolve.sound.SoundTest;public class Display extends Canvas implements Runnable {	public final static int WIDTH = 1200;	public final static int HEIGHT = 800;	public static JPanel frame;	public static long genSeed;	public static Display display;	public static SoundHandler sh=new SoundHandler();	public static void changeComponent(Component c){		display.setVisible(false);		frame.removeAll();		frame.add(c);		frame.revalidate();		frame.repaint();		display.stop();	}	public static void main(String[] args) {		if(args.length==0){			genSeed=new Random().nextLong();		}else{			genSeed=Long.parseLong(args[0]);		}		System.out.println("Seed: " + genSeed);		Display game = new Display();		JFrame window=new JFrame();		window.pack();		frame = new JPanel();		window.add(frame);		window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);		frame.add(game);		window.setResizable(false);		window.setVisible(true);		window.setSize(WIDTH, HEIGHT);		window.setLocationRelativeTo(null);		frame.setBorder(null);		((FlowLayout) frame.getLayout()).setVgap(0);		System.out.println("Running...");		System.out.println("Ram capability: "+Runtime.getRuntime().maxMemory());		game.start();	}	public static void returnCanvas(){		display.setVisible(true);		frame.removeAll();		frame.add(display);		display.setSize(WIDTH,HEIGHT);		display.setLocation(0, 0);				frame.revalidate();		frame.repaint();		display.revalidate();		display.start();	}	public static void revalidateDisplay(){		frame.revalidate();		frame.repaint();		display.revalidate();	}	private int[] pixels;	private BufferedImage img;	private boolean Running=false;	private Thread thread;	Screen screen;		InputHandler input;		public Controller game;	long frameNum=System.nanoTime();	Victory vic=null;		public Display(){		display=this;		img=new BufferedImage(WIDTH,HEIGHT,BufferedImage.TYPE_INT_RGB);		pixels= ((DataBufferInt) img.getRaster().getDataBuffer()).getData();		screen=new Screen(WIDTH,HEIGHT);				input=new InputHandler();		addKeyListener(input);		addFocusListener(input);		addMouseListener(input);		addMouseMotionListener(input);				game=new Controller();	}	public void endGame(){		stop();	}	public void lRender(Controller game,double loadingAmount){		BufferStrategy bs=this.getBufferStrategy();		if(bs==null){			createBufferStrategy(2);			lRender(game,loadingAmount);			return;		}		//System.out.println("load");		screen.renderLoadingScreen(game, loadingAmount);		for(int i=0;i<WIDTH*HEIGHT;i++){			pixels[i]=screen.pixels[i];		}		Graphics g=bs.getDrawGraphics();		g.drawImage(img, 0, 0, WIDTH, HEIGHT, null);		g.setColor(Color.BLACK);		for(int i=0;i<game.loadCount*2;i++){			g.drawString(game.Competetors[i].toString(),50,51+(i)*12);		}		g.dispose();		bs.show();		}	public void render(){		frameNum=System.nanoTime();		BufferStrategy bs=this.getBufferStrategy();		if(bs==null||bs.contentsLost()){			createBufferStrategy(2);			return;		}		screen.render(game);		for(int i=0;i<WIDTH*HEIGHT;i++){			pixels[i]=screen.pixels[i];		}		Graphics g=bs.getDrawGraphics();		//DecimalFormat df2 = new DecimalFormat( "#0.00" );		g.drawImage(img, 0, 0, WIDTH, HEIGHT, null);				/*try {			g.setFont(Font.createFont(Font.TRUETYPE_FONT, new File("Constantine.ttf")).deriveFont(0,20));		} catch (FontFormatException e) {			e.printStackTrace();		} catch (IOException e) {			e.printStackTrace();		}*/		//g.setColor(new Color(Game.player1.species.color));		/*g.drawString("Health:"+df2.format(Game.player1.health), 10, 10);		g.drawString("Speed:"+df2.format(Game.player1.speed), 10, 25);		g.drawString("Power:"+df2.format(Game.player1.power), 10, 40);		g.drawString("Fitness:"+df2.format(Game.player1.fitness), 10, 55);		g.drawString("Desc:"+Game.player1.species.descriptor, 10, 70);		g.drawString(Game.player1.species.name, 10, 750);				FontRenderContext frc=new FontRenderContext(null,true,true);		GlyphVector gv=g.getFont().createGlyphVector(frc, Game.player2.species.name);		int length=(int) (gv.getVisualBounds().getWidth());		g.setColor(new Color(Game.player2.species.color));		g.drawString("Health:"+df2.format(Game.player2.health), 800, 10);		g.drawString("Speed:"+df2.format(Game.player2.speed), 800, 25);		g.drawString("Power:"+df2.format(Game.player2.power), 800, 40);		g.drawString("Fitness:"+df2.format(Game.player2.fitness), 800, 55);		g.drawString("Desc:"+Game.player2.species.descriptor, 800, 70);		g.drawString(Game.player2.species.name, 1170-length, 750);				g.setColor(new Color(0));		g.drawString("Battle Number:"+game.generator.battleNumber, 10, 310);		g.drawString("Gen:"+game.generator.gen, 10, 325);		g.drawString("Fight Number:"+game.generator.fNum, 10, 340);				g.setColor(Color.BLACK);		int y1=110,y2=110;		for(User u:game.handle.getGamblers()){			if(u.getBet(Game.player1)>0){				g.drawString(u.getName(), 10, y1);				y1+=15;			}			else if(u.getBet(Game.player2)>0){				g.drawString(u.getName(), 800, y2);				y2+=15;			}		}*/				g.dispose();		bs.show();			}	@Override	public void run() {		while(Running){			if(game.gen==2){				game.gen=3;			}			if(game.gen==4){				vic.step(input.key);				wRender();			}			else if(game.tick(input.key) != null&&game.gen==3){				game.gen=4;				vic=new Victory(game.allCompetetors,game.handle.getOrderedList(),game.tick(input.key)[0]);			}			if(game.gen==1){				game.gen=-1;				lRender((Controller)game,game.getLoad());				}			else if(game.gen==3){				while(frameNum+5000000>=System.nanoTime());				render();				}			}		}		public void showScreen(){				BufferStrategy bs=this.getBufferStrategy();		if(bs==null){			createBufferStrategy(2);			showScreen();			return;		}				Graphics g=bs.getDrawGraphics();		g.drawImage(img, 0, 0, WIDTH, HEIGHT, null);		g.dispose();		bs.show();	}	private void start() {		if (Running)			return;		Running=true;		thread=new Thread(this);		thread.start();	}	private void stop(){		if(!Running)			return;		Running=false;		try {			thread.join();		} catch (Exception e) {			e.printStackTrace();		}	}	public void wRender(){		BufferStrategy bs=this.getBufferStrategy();		if(bs==null){			createBufferStrategy(2);			wRender();			return;		}		//System.out.println("load");		screen.renderWinningScreen(vic);		for(int i=0;i<WIDTH*HEIGHT;i++){			pixels[i]=screen.pixels[i];		}		Graphics g=bs.getDrawGraphics();		g.drawImage(img, 0, 0, WIDTH, HEIGHT, null);		g.dispose();		bs.show();	}}